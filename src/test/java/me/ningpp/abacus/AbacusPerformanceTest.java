/*
 *    Copyright 2024 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package me.ningpp.abacus;

import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

class AbacusPerformanceTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(AbacusUtilTest.class);

    private static final String EXPRESSION = "($6-($29/$12*($23*($10*$3-($21/($9+($14/ ( ( 1 < 7  ||  stringContainsAny(\"poGnpEalbVd5Cp8cY3MFQg85Es6qkKhH\", \"3\", \"Qc\") ) ? ($3- ( ( 1 >= 1  ||  stringContainsAny(\"YavNOgfHQ1NN8O9iO4K3kxQobPeeP8Tg\", \"l7\", \"zemin( $26*$4/$27-$31+$24*$14/$28+$9-$20+$25-$1-$23+$17*$29+$2+$18/$22+$21*$15-$11/$16/$6+$10+$12-$8-$19-$7*$3/$5-$13/$30, $27-$30-$26*$13-$9/$25+$12+$16*$31/$7-$24+$10/$20-$1-$3-$2+$15-$17/$18/$19*$4-$6-$21+$5-$28-$11+$22+$29+$14-$8*$23, $16/$8/$18-$31*$21+$22-$17-$13/$2*$5+$7/$30-$14/$15*$10*$19*$26/$25*$6-$28-$3*$9*$1+$23-$27/$24/$12-$11*$20/$4+$29, $11/$26+$31*$14/$28+$25+$8/$23+$5*$2/$7+$13-$22+$16/$4*$24-$30-$12+$15/$10+$6-$17+$20/$1+$3+$29/$21*$27*$9+$19*$18 ) )) ) )))* max(  min( ($7+ ( (  3 <= 2  ||  5 != 6  ) ? (($17*$5+$1/$29-$11+$23-$28+$14*$24+$9/$22*$10+$20+$4+$21+$6-$25*$15/$30/$8-$31*$18/$12/$16/$7/$19*$26*$3*$13/$27/$2)-$27+$2*$11/$4-$22+$7/$18-$30+$8-$25+$15+$6*$3+$13/$29*$1-$10-$23+$14*$16*$20*$9/$24*$26*$5/$19+$31+$21*$17+$12+$28) : (($8* max||  stringContainsAny(\"vk8lrQ1TESJ4mM7wl72CToiDugPndweZ\", \"J0\", \"O\") ) ? (($16/($29+($26+$8-$28*$14-$15/$23+$13-$11*$1-$16-$9*$7+$31/$21/$29/$30-$10/$25/$20*$12-$17/$4+$24+$19*$18+$5*$27+$6-$3/$22*$2)+$15-$5/$7/$21+$25/$6*$27+$17-$3*$10*$14+$16-$18*$2/$13+$26/$4+$29*$9-$11/$24+$12*$1/$28+$31/$30/$22/$19*$8-$20+$23))) : ((($5-$21/ max( ($25+$10*$7-$30/$14+$18*$4+$29/$26+$27*$13+$28/$3-$1*$17-$2+$15+$11+$21*$31-$16-$22-$9+$25*$8*$24+$23*$20*$12+$6-$5-$19), ($1*$10+$4+$14/$12-$15-$1*$22/$28-$29*$30*$18-$6/$24+$13*$11+$9-$25+$27/$7*$19+$17-$5-$20/$16*$2*$3*$31*$8*$23+$26-$21), $22+($18/$24*$13/$12*$4+$26-$7+$14/$31-$6-$3-$23*$5/$9/$19+$15-$16*$20+$30-$8/$10+$11/$2*$1-$29+$17-$21/$27/$28*$22-$25)*$8*$25-$31-$6+$12-$1/$9-$17*$18-$4/$14+$30/$19*$5/$11*$7-$20+$22+$29-$28+$10+$24*$26-$16/$2+$21*$3+$27/$15+$13-$23, ($5-$20+$22+$7/$29/$6+$15-$9*$30-$13*$23*$16-$25/$12/$28/$19*$18/$1-$3/$17/$24*$4+$21/$26+$14-$11/$2-$27*$10*$31-$8)/$19+$5*$2*$24*$9-$21+$11+$28/$25*$8-$23+$15/$30+$4-$6/$16/$17/$18/$1-$26/$10*$31*$3+$29+$13-$7-$27/$22-$12+$20/$14 ) ))) )  ) ))-($19/ ( (  9 > 0  &&  9 <= 1  ) ? ($20/ min( ($27/($10-($13-($1/$9*$20-$23*$24+$19/$11-$12-$18+$29+$15+$13+$16-$7/$25+$8*$3+$2+$10+$27*$5+$28/$4+$30*$14*$31-$22-$21-$6/$26/$17)-$3*$1*$22-$20+$26+$6*$31/$28+$21+$18*$29+$16/$5*$17/$2-$9/$8*$19+$14*$24/$15-$13-$11+$25/$10+$4-$12/$7/$27+$30-$23))), (($12/($4/$21+$27*$5+($19-$18+$9+$14+$25/$13*$15+$21*$11-$30+$27/$8-$1*$6-$10-$16+$31*$3*$12*$19/$23/$17*$29-$22/$2+$4-$20-$24-$7-$28/$26+$5))))-($11+($17/($21/$30-$2/$4-$13/$6+$29+$23-$24-$15-$17/$7/$9*$26+$11/$22+$16/$28*$3-$25-$14+$1/$18-$19*$31+$20-$12/$8*$5+$27-$10)*$21-$27+$28/$22*$13*$12/$31*$8+$4/$25+$18*$24-$20+$29-$19+$9+$23/$2+$17+$26+$11/$6*$7-$5/$15*$16*$14-$30+$1-$3-$10))/($5+($1-$4*$22/$1+$10*$3-$30+$17*$13/$21/$15*$6/$5/$26/$19*$29+$23*$28*$20/$11+$25*$7-$9*$2+$24-$8+$27-$14/$16+$18*$12-$31)), ($20+ min( ($4*($14-$4*$16-$9*$26*$27-$22+$23-$24/$5*$28/$18-$17/$8+$29+$13*$20/$19/$30+$6+$15-$7/$3*$2+$1/$11/$31+$12-$21-$25-$10)-$3/$2-$28+$29/$18*$13*$20*$5+$8+$16/$4+$1*$24-$31-$12+$21-$19/$30/$26-$23+$11*$27/$15/$9*$22+$10+$14+$7/$25/$6+$17), ($2-$9*($10+$6/$14*$25/$16+$19/$27/$10+$1-$5+$18*$29/$31*$21/$28+$3-$30/$17+$4/$13-$7*$11*$20+$26+$24+$23-$22/$12*$2*$15*$9/$8)), $26+( min( $31*$17+$25/$14*$7+$28+$11+$5-$23*$21+$18+$16/$12-$30*$20*$26+$19*$13*$27-$24/$4*$15+$1-$29*$6*$3-$2/$22-$10+$8*$9, $26*$16/$2*$24/$21-$1/$29+$10*$25/$14/$19-$7*$18-$13*$23/$9/$4+$27-$31*$15/$17*$5-$11*$22-$30+$3/$12*$20+$8+$6+$28, $18+$1/$5/$22*$25-$24+$31*$23-$3/$11-$4*$26*$15*$6/$17+$9+$20/$12/$19/$7+$21-$16-$13+$2/$30+$27+$29/$14/$28+$10+$8, $21-$20/$14/$5-$17+$3-$18-$30/$24+$7/$27/$2+$10-$16-$28+$9-$15*$13/$31-$29*$11/$23*$26*$8-$6-$4/$1*$19/$22/$25*$12 ) )* max( $8+$21+$29/$13+$31+$6+$20*$16*$10*$28/$18/$30/$24*$9/$2+$25/$1+$3-$26/$15*$12*$14-$19-$27+$11/$5*$17+$23+$22/$7-$4, $3+$29*$20*$14-$23*$18/$17+$11/$31/$19*$28/$26/$10+$5-$2*$27/$6*$22/$12*$24-$7/$9*$30+$15-$13+$8+$25+$1+$4/$21+$16 )  ) ), $24+($17-($30- min( ($4*$13-$29-$27/$8/$5*$20*$12-$11+$1/$9/$31/$22+$2+$15+$23/$18/$30/$4/$21-$19/$26+$10*$28+$6*$25/$14+$7+$24-$3*$16-$17),  maxmax( $25-$16+$6/$21/$20/$17+$15*$9-$18+$22+$24+$14-$12+$23/$26/$31+$4-$27/$29-$8/$19/$2+$7/$30*$1/$28-$3*$13*$10/$5/$11, $12+$11-$27/$9+$14-$3+$29+$23+$4-$8-$10-$1/$18+$13+$25-$30*$21-$26-$7/$2/$19-$20+$5/$15-$28/$6*$16-$24/$22+$17/$31, $16-$23-$13-$27-$19*$2/$9-$30*$20-$10*$25+$11/$18-$21-$4/$7/$6+$22*$29/$1/$28-$24*$8*$31-$3-$5-$12/$15+$14/$26-$17, $24/$25/$10*$14-$8+$16/$23/$2+$5+$11/$31*$20+$18/$17+$6/$30-$21*$22*$29-$19/$12/$7*$3-$4+$13/$9/$15*$27-$26+$1-$28 ) )+ maxmin(  max( $22-$7+$29+$28/$31/$10/$8*$18+$11-$23+$4+$3-$5/$25+$15-$14-$2-$17*$26/$24/$13+$27*$16*$21*$20+$30/$19*$9+$6-$1/$12, $18+$1+$27+$9*$11*$15/$30*$7-$26/$20+$16+$23*$4/$14+$28+$17-$25*$10+$2*$19/$3-$12*$8/$29*$13*$6+$22*$24+$31+$5/$21 ) , $8-($15*$31-$14/$18/$24+$8-$10+$16-$4*$27/$28+$20+$1+$12-$17*$13-$22*$23-$29/$2/$6+$26/$30-$3+$9-$21/$11/$7-$19-$5*$25)-$29*$17+$15+$22*$19/$24/$7*$14+$13+$20+$2*$21*$18*$11/$28/$1+$16/$10/$23/$4+$9-$12+$27*$6*$5/$3-$25-$8/$31-$26/$30 ) )/($5*($29*$14+$24-$5+$22/$31-$11*$26/$10*$3/$2+$28/$30/$15/$18*$27/$12-$19-$8+$13-$21*$25/$17+$29+$16-$9-$20+$6+$1/$7*$23*$4))))))) ) ) : ((($21/$10/($22+($20*(($21*($16*$17/$17+($20+($19*($23*$9-$6/$18*$30-$23/$27-$13/$20-$14-$3*$12+$17/$22/$10*$24+$11*$8+$21-$7+$26*$15+$25*$4/$31+$2-$19-$16/$1+$5-$28*$29))))))*($12*($15+(($12-($20+$13+$26/$29+$2+$31*$4-$10+$19*$9*$27+$3/$24+$6+$12/$23/$17*$5*$11-$18*$14+$16/$22-$28*$25*$15+$7-$20-$30+$21*$1-$8)))/$2-(($20/$22-$18*$21+$23+$10-$13-$9/$26-$25-$15+$31*$16+$30/$14/$20-$3-$29-$4+$11*$24/$5-$27-$8*$12+$19+$6-$17+$2*$7*$28/$1))/($2-$18*$22*$12/$16-$13/$30+$2*$9+$29-$21/$23-$11-$6*$10*$15-$7*$19*$27-$26+$1+$20+$17-$5/$25/$14/$28-$31*$24*$3*$8*$4)))))))) ) )))))))";

    private static final Map<String, Object> CONTEXT = new HashMap<>();

    static {
        for (int i = 0; i < 31; i++) {
            CONTEXT.put("$" + (i+1), new BigDecimal(i+1));
        }
    }

    @Test
    void performanceTest() {
        int size = 13;
        List<Duration> costs = new ArrayList<>(size);
        Object result = null;
        ExpressionResultDTO resultDto = AbacusUtil.parse(EXPRESSION);
        for (int i = 0; i < size; i++) {
            LocalDateTime start = LocalDateTime.now();
            result = AbacusUtil.calculate(resultDto, CONTEXT, 7, RoundingMode.HALF_UP);
            costs.add(Duration.between(start, LocalDateTime.now()));
        }
        Collections.sort(costs);
        LOGGER.info("cost {}", costs.get(0).toNanos()/1000000.0);
        assertEquals(new BigDecimal("-1531.74895031866339"), result);
    }

}
